<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0053)http://mathesaurus.sourceforge.net/numeric-numpy.html -->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style data-merge-styles="true"></style><title>NumPy for Numeric/numarray users – Mathesaurus</title><link rel="stylesheet" type="text/css" href="./NumPy for Numeric_numarray users – Mathesaurus_files/default.css"><link rel="copyright" href="http://creativecommons.org/licenses/by/3.0/"><script type="text/javascript" src="./NumPy for Numeric_numarray users – Mathesaurus_files/urchin.js"><script type="text/javascript">
          _uacct = "UA-1807545-3";
          urchinTracker();
        </script><style type="text/css">.backpack.dropzone {
  font-family: 'SF UI Display', 'Segoe UI';
  font-size: 15px;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 250px;
  height: 150px;
  font-weight: lighter;
  color: white;
  will-change: right;
  z-index: 2147483647;
  bottom: 20%;
  background: #333;
  position: fixed;
  user-select: none;
  transition: left .5s, right .5s;
  right: 0px; }
  .backpack.dropzone .animation {
    height: 80px;
    width: 250px;
    background: url("chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/assets/backpack/dropzone/hoverstate.png") left center; }
  .backpack.dropzone .title::before {
    content: 'Save to'; }
  .backpack.dropzone.closed {
    right: -250px; }
  .backpack.dropzone.hover .animation {
    animation: sxt-play-anim-hover 0.91s steps(21);
    animation-fill-mode: forwards;
    background: url("chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/assets/backpack/dropzone/hoverstate.png") left center; }

@keyframes sxt-play-anim-hover {
  from {
    background-position: 0px; }
  to {
    background-position: -5250px; } }
  .backpack.dropzone.saving .title::before {
    content: 'Saving to'; }
  .backpack.dropzone.saving .animation {
    background: url("chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/assets/backpack/dropzone/saving_loop.png") left center;
    animation: sxt-play-anim-saving steps(59) 2.46s infinite; }

@keyframes sxt-play-anim-saving {
  100% {
    background-position: -14750px; } }
  .backpack.dropzone.saved .title::before {
    content: 'Saved to'; }
  .backpack.dropzone.saved .animation {
    background: url("chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/assets/backpack/dropzone/saved.png") left center;
    animation: sxt-play-anim-saved steps(20) 0.83s forwards; }

@keyframes sxt-play-anim-saved {
  100% {
    background-position: -5000px; } }
</style></head><body><h1>NumPy for Numeric/numarray users</h1><div xmlns=""><h3>Help</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">help()</tt></td><td>Browse help interactively</td></tr><tr><td></td><td><tt title="Python">help</tt></td><td>Help on using help</td></tr><tr class="odd"><td></td><td><tt title="Python">help(plot)</tt> <span class="alt">or</span> <tt title="Python; IPython">?plot</tt></td><td>Help for a function</td></tr><tr><td></td><td><tt title="Python">help(pylab)</tt></td><td>Help for a toolbox/library package</td></tr></tbody></table><div><h3>Searching available documentation</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">help(); modules [Numeric]</tt></td><td>List available packages</td></tr><tr><td></td><td><tt title="Python">help(plot)</tt></td><td>Locate functions</td></tr></tbody></table></div><div><h3>Using interactively</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">ipython -pylab</tt></td><td>Start session</td></tr><tr><td></td><td><tt title="Python">TAB</tt></td><td>Auto completion</td></tr><tr class="odd"><td></td><td><tt title="Python">execfile('foo.py')</tt> <span class="alt">or</span> <tt title="Python; IPython">run foo.py</tt></td><td>Run code from file</td></tr><tr><td></td><td><tt title="Python">hist -n</tt></td><td>Command history</td></tr><tr class="odd"><td></td><td><tt title="Python">CTRL-D</tt><br><tt title="Python">CTRL-Z # windows</tt><br><tt title="Python; sys">sys.exit()</tt></td><td>End session</td></tr></tbody></table></div></div><div xmlns=""><h3>Operators</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr></tbody></table><div><h3>Arithmetic operators</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a=1; b=1</tt></td><td>Assignment; defining a number</td></tr><tr><td></td><td><tt title="Python">a + b</tt> <span class="alt">or</span> <tt title="Python">add(a,b)</tt></td><td>Addition</td></tr><tr class="odd"><td></td><td><tt title="Python">a - b</tt> <span class="alt">or</span> <tt title="Python">subtract(a,b)</tt></td><td>Subtraction</td></tr><tr><td></td><td><tt title="Python">a * b</tt> <span class="alt">or</span> <tt title="Python">multiply(a,b)</tt></td><td>Multiplication</td></tr><tr class="odd"><td></td><td><tt title="Python">a / b</tt> <span class="alt">or</span> <tt title="Python">divide(a,b)</tt></td><td>Division</td></tr><tr><td></td><td><tt title="Python">a ** b</tt><br><tt title="Python; NumPy">power(a,b)</tt><br><tt title="Python; math">pow(a,b)</tt></td><td>Power, $a^b$</td></tr><tr class="odd"><td></td><td><tt title="Python">a % b</tt><br><tt title="Python; NumPy">remainder(a,b)</tt><br><tt title="Python; math">fmod(a,b)</tt></td><td>Remainder</td></tr><tr><td></td><td><tt title="Python">a+=b</tt> <span class="alt">or</span> <tt title="Python">add(a,b,a)</tt></td><td>In place operation to save array creation overhead</td></tr></tbody></table></div><div><h3>Relational operators</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a == b</tt> <span class="alt">or</span> <tt title="Python">equal(a,b)</tt></td><td>Equal</td></tr><tr><td></td><td><tt title="Python">a &lt; b</tt> <span class="alt">or</span> <tt title="Python">less(a,b)</tt></td><td>Less than</td></tr><tr class="odd"><td></td><td><tt title="Python">a &gt; b</tt> <span class="alt">or</span> <tt title="Python">greater(a,b)</tt></td><td>Greater than</td></tr><tr><td></td><td><tt title="Python">a &lt;= b</tt> <span class="alt">or</span> <tt title="Python">less_equal(a,b)</tt></td><td>Less than or equal</td></tr><tr class="odd"><td></td><td><tt title="Python">a &gt;= b</tt> <span class="alt">or</span> <tt title="Python">greater_equal(a,b)</tt></td><td>Greater than or equal</td></tr><tr><td></td><td><tt title="Python">a != b</tt> <span class="alt">or</span> <tt title="Python">not_equal(a,b)</tt></td><td>Not Equal</td></tr></tbody></table></div><div><h3>Logical operators</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a and b</tt></td><td>Short-circuit logical AND</td></tr><tr><td></td><td><tt title="Python">a or b</tt></td><td>Short-circuit logical OR</td></tr><tr class="odd"><td></td><td><tt title="Python">logical_and(a,b)</tt> <span class="alt">or</span> <tt title="Python">a and b</tt></td><td>Element-wise logical AND</td></tr><tr><td></td><td><tt title="Python">logical_or(a,b)</tt> <span class="alt">or</span> <tt title="Python">a or b</tt></td><td>Element-wise logical OR</td></tr><tr class="odd"><td></td><td><tt title="Python">logical_xor(a,b)</tt></td><td>Logical EXCLUSIVE OR</td></tr><tr><td></td><td><tt title="Python">logical_not(a)</tt> <span class="alt">or</span> <tt title="Python">not a</tt></td><td>Logical NOT</td></tr></tbody></table></div><div><h3>root and logarithm</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">math.sqrt(a)</tt></td><td>Square root</td></tr><tr><td></td><td><tt title="Python">math.log(a)</tt></td><td>Logarithm, base $e$ (natural)</td></tr><tr class="odd"><td></td><td><tt title="Python">math.log10(a)</tt></td><td>Logarithm, base 10</td></tr><tr><td></td><td><tt title="Python">math.log(a, 2)</tt></td><td>Logarithm, base 2 (binary)</td></tr><tr class="odd"><td></td><td><tt title="Python">math.exp(a)</tt></td><td>Exponential function</td></tr></tbody></table></div><div><h3>Round off</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">around(a)</tt> <span class="alt">or</span> <tt title="Python; math">math.round(a)</tt></td><td>Round</td></tr><tr><td></td><td><tt title="Python">ceil(a)</tt></td><td>Round up</td></tr><tr class="odd"><td></td><td><tt title="Python">floor(a)</tt></td><td>Round down</td></tr><tr><td></td><td><tt title="Python">fix(a)</tt></td><td>Round towards zero</td></tr></tbody></table></div><div><h3>Mathematical constants</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">math.pi</tt></td><td>$\pi=3.141592$</td></tr><tr><td></td><td><tt title="Python">math.e</tt> <span class="alt">or</span> <tt title="Python">math.exp(1)</tt></td><td>$e=2.718281$</td></tr></tbody></table><div><h3>Missing values; IEEE-754 floating point status flags</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">nan</tt></td><td>Not a Number</td></tr><tr><td></td><td><tt title="Python">inf</tt></td><td>Infinity, $\infty$</td></tr><tr class="odd"><td></td><td><tt title="Python">plus_inf</tt></td><td>Infinity, $+\infty$</td></tr><tr><td></td><td><tt title="Python">minus_inf</tt></td><td>Infinity, $-\infty$</td></tr><tr class="odd"><td></td><td><tt title="Python">plus_zero</tt></td><td>Plus zero, $+0$</td></tr><tr><td></td><td><tt title="Python">minus_zero</tt></td><td>Minus zero, $-0$</td></tr></tbody></table></div></div><div><h3>Complex numbers</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">z = 1j</tt></td><td>Imaginary unit</td></tr><tr><td></td><td><tt title="Python">z = 3+4j</tt> <span class="alt">or</span> <tt title="Python">z = complex(3,4)</tt></td><td>A complex number, $3+4i$</td></tr><tr class="odd"><td></td><td><tt title="Python">abs(3+4j)</tt></td><td>Absolute value (modulus)</td></tr><tr><td></td><td><tt title="Python">z.real</tt></td><td>Real part</td></tr><tr class="odd"><td></td><td><tt title="Python">z.imag</tt></td><td>Imaginary part</td></tr><tr><td></td><td><tt title="Python">z.conj(); z.conjugate()</tt></td><td>Complex conjugate</td></tr></tbody></table></div><div><h3>Trigonometry</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">atan2(b,a)</tt></td><td>Arctangent, $\arctan(b/a)$</td></tr><tr><td></td><td><tt title="Python">hypot(x,y)</tt></td><td>Hypotenus; Euclidean distance</td></tr></tbody></table></div><div><h3>Generate random numbers</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric.RandomArray">random((10,))</tt><br><tt title="Python; Numeric.RandomArray">uniform(0,1,(10,))</tt></td><td><tt title="Python; NumPy.random">random.random((10,))</tt><br><tt title="Python; NumPy.random">random.uniform((10,))</tt></td><td>Uniform distribution</td></tr><tr><td><tt title="Python; Numeric.RandomArray">uniform(2,7,(10,))</tt></td><td><tt title="Python; NumPy">random.uniform(2,7,(10,))</tt></td><td>Uniform: Numbers between 2 and 7</td></tr><tr class="odd"><td><tt title="Python; Numeric.RandomArray">uniform(0,1,(6,6))</tt></td><td><tt title="Python; NumPy">random.uniform(0,1,(6,6))</tt></td><td>Uniform: 6,6 array</td></tr><tr><td><tt title="Python; Numeric.RandomArray">standard_normal((10,))</tt></td><td><tt title="Python; NumPy">random.standard_normal((10,))</tt></td><td>Normal distribution</td></tr></tbody></table></div></div><div xmlns=""><h3>Vectors</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a=array([2,3,4,5])</tt></td><td>Row vector, $1 \times n$-matrix</td></tr><tr><td><tt title="Python; Numeric">transpose(array([2,3,4,5]))</tt></td><td><tt title="Python; NumPy">array([2,3,4,5])[:,NewAxis]</tt><br><tt title="Python; NumPy">array([2,3,4,5]).reshape(-1,1)</tt><br><tt title="Python; NumPy">r_[1:10,'c']</tt></td><td>Column vector, $m \times 1$-matrix</td></tr></tbody></table><div><h3>Sequences</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric">arange(1,11, typecode=Float)</tt></td><td><tt title="Python; NumPy">arange(1,11, dtype=Float)</tt><br><tt title="Python">range(1,11)</tt></td><td>1,2,3, ... ,10</td></tr><tr><td></td><td><tt title="Python">arange(10.)</tt></td><td>0.0,1.0,2.0, ... ,9.0</td></tr><tr class="odd"><td></td><td><tt title="Python">arange(1,11,3)</tt></td><td>1,4,7,10</td></tr><tr><td></td><td><tt title="Python">arange(10,0,-1)</tt></td><td>10,9,8, ... ,1</td></tr><tr class="odd"><td></td><td><tt title="Python">arange(10,0,-3)</tt></td><td>10,7,4,1</td></tr><tr><td></td><td><tt title="Python">linspace(1,10,7)</tt></td><td>Linearly spaced vector of n=7 points</td></tr><tr class="odd"><td><tt title="Python; Numeric">a[::-1]; a.reverse()</tt></td><td><tt title="Python; NumPy">a[::-1]</tt></td><td>Reverse</td></tr><tr><td></td><td><tt title="Python">a.fill(3), a[:] = 3</tt></td><td>Set all values to same scalar value</td></tr></tbody></table></div><div><h3>Concatenation (vectors)</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">concatenate((a,a))</tt></td><td>Concatenate two vectors</td></tr><tr><td></td><td><tt title="Python">concatenate((range(1,5),a), axis=1)</tt></td><td></td></tr></tbody></table></div><div><h3>Repeating</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">concatenate((a,a))</tt></td><td>1 2 3, 1 2 3</td></tr><tr><td><tt title="Python; Numeric">repeat(a,3)</tt></td><td><tt title="Python; NumPy">a.repeat(3)</tt></td><td>1 1 1, 2 2 2, 3 3 3</td></tr><tr class="odd"><td><tt title="Python; Numeric">repeat(a,a)</tt></td><td><tt title="Python; NumPy">a.repeat(a)</tt></td><td>1, 2 2, 3 3 3</td></tr></tbody></table></div><div><h3>Miss those elements out</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a[1:]</tt></td><td>miss the first element</td></tr><tr><td></td><td><tt title="Python">a[-1]</tt></td><td>last element</td></tr><tr class="odd"><td></td><td><tt title="Python">a[-2:]</tt></td><td>last two elements</td></tr></tbody></table></div><div><h3>Maximum and minimum</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">maximum(a,b)</tt></td><td>pairwise max</td></tr><tr><td></td><td><tt title="Python">concatenate((a,b)).max()</tt></td><td>max of all values in two vectors</td></tr><tr class="odd"><td></td><td><tt title="Python">v,i = a.max(0),a.argmax(0)</tt></td><td></td></tr></tbody></table></div><div><h3>Vector multiplication</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a*a</tt></td><td>Multiply two vectors</td></tr><tr><td></td><td><tt title="Python">dot(u,v)</tt></td><td>Vector dot product, $u \cdot v$</td></tr></tbody></table></div></div><div xmlns=""><h3>Matrices</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a = array([[2,3],[4,5]])</tt></td><td>Define a matrix</td></tr></tbody></table><div><h3>Concatenation (matrices); rbind and cbind</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">concatenate((a,b), axis=0)</tt><br><tt title="Python">vstack((a,b))</tt></td><td>Bind rows</td></tr><tr><td></td><td><tt title="Python">concatenate((a,b), axis=1)</tt><br><tt title="Python">hstack((a,b))</tt></td><td>Bind columns</td></tr><tr class="odd"><td></td><td><tt title="Python">concatenate((a,b), axis=2)</tt><br><tt title="Python">dstack((a,b))</tt></td><td>Bind slices (three-way arrays)</td></tr><tr><td></td><td><tt title="Python">concatenate((a,b), axis=None)</tt></td><td>Concatenate matrices into one vector</td></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">concatenate((r_[1:5],r_[1:5])).reshape(2,-1)</tt><br><tt title="Python; NumPy">vstack((r_[1:5],r_[1:5]))</tt></td><td>Bind rows (from vectors)</td></tr></tbody></table></div><div><h3>Array creation</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">zeros((3,5),Float)</tt></td><td>0 filled array</td></tr><tr><td></td><td><tt title="Python">zeros((3,5))</tt></td><td>0 filled array of integers</td></tr><tr class="odd"><td></td><td><tt title="Python">ones((3,5),Float)</tt></td><td>1 filled array</td></tr><tr><td><tt title="Python; Numeric">ones((3,5))*9</tt></td><td></td><td>Any number filled array</td></tr><tr class="odd"><td></td><td><tt title="Python">identity(3)</tt></td><td>Identity matrix</td></tr><tr><td></td><td><tt title="Python">diag((4,5,6))</tt></td><td>Diagonal</td></tr><tr class="odd"><td></td><td><tt title="Python">a = empty((3,3))</tt></td><td>Empty array</td></tr></tbody></table></div><div><h3>Reshape and flatten matrices</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric">a.shape = (2,3)</tt></td><td><tt title="Python; NumPy">arange(1,7).reshape(2,-1)</tt><br><tt title="Python; numarray">a.setshape(2,3)</tt></td><td>Reshaping (rows first)</td></tr><tr><td></td><td><tt title="Python">arange(1,7).reshape(-1,2).transpose()</tt></td><td>Reshaping (columns first)</td></tr><tr class="odd"><td><tt title="Python; Numeric">ravel(a)</tt></td><td><tt title="Python; NumPy">a.flatten()</tt></td><td>Flatten to vector (by rows, like comics)</td></tr><tr><td><tt title="Python; Numeric">ravel(transpose(a))</tt></td><td><tt title="Python; NumPy">a.flatten(1)</tt></td><td>Flatten to vector (by columns)</td></tr></tbody></table></div><div><h3>Shared data (slicing)</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">b = a.copy()</tt></td><td>Copy of a</td></tr></tbody></table></div><div><h3>Indexing and accessing elements (Python: slicing)</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a = array([[ 11, 12, 13, 14 ],</tt><br><tt title="Python">           [ 21, 22, 23, 24 ],</tt><br><tt title="Python">           [ 31, 32, 33, 34 ]])</tt></td><td>Input is a 3,4 array</td></tr><tr><td></td><td><tt title="Python">a[1,2]</tt></td><td>Element 2,3 (row,col)</td></tr><tr class="odd"><td></td><td><tt title="Python">a[0,]</tt></td><td>First row</td></tr><tr><td></td><td><tt title="Python">a[:,0]</tt></td><td>First column</td></tr><tr class="odd"><td><tt title="Python; Numeric">take(take(a,[0,2]),[0,3], axis=1)</tt></td><td><tt title="Python; NumPy">a.take([0,2]).take([0,3], axis=1)</tt></td><td>Array as indices</td></tr><tr><td></td><td><tt title="Python">a[1:,]</tt></td><td>All, except first row</td></tr><tr class="odd"><td></td><td><tt title="Python">a[-2:,]</tt></td><td>Last two rows</td></tr><tr><td></td><td><tt title="Python">a[::2,:]</tt></td><td>Strides: Every other row</td></tr><tr class="odd"><td></td><td><tt title="Python">a[...,2]</tt></td><td>Third in last dimension (axis)</td></tr><tr><td><tt title="Python; Numeric">take(a,[0,2,3],axis=1)</tt></td><td><tt title="Python; NumPy">a.take([0,2,3],axis=1)</tt></td><td>Remove one column</td></tr><tr class="odd"><td></td><td><tt title="Python">a.diagonal(offset=0)</tt></td><td>Diagonal</td></tr></tbody></table></div><div><h3>Assignment</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a[:,0] = 99</tt></td><td></td></tr><tr><td></td><td><tt title="Python">a[:,0] = array([99,98,97])</tt></td><td></td></tr><tr class="odd"><td><tt title="Python; Numeric">choose(a&gt;90, (a,90))</tt></td><td><tt title="Python; NumPy">(a&gt;90).choose(a,90)</tt><br><tt title="Python; NumPy">a.clip(min=None, max=90)</tt></td><td>Clipping: Replace all elements over 90</td></tr><tr><td><tt title="Python; Numeric">clip(a,2,5)</tt></td><td><tt title="Python; NumPy">a.clip(min=2, max=5)</tt></td><td>Clip upper and lower values</td></tr></tbody></table></div><div><h3>Transpose and inverse</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric">transpose(a)</tt></td><td><tt title="Python; NumPy">a.conj().transpose()</tt></td><td>Transpose</td></tr><tr><td></td><td><tt title="Python">a.transpose()</tt></td><td>Non-conjugate transpose</td></tr><tr class="odd"><td><tt title="Python; Numeric.LinearAlgebra">determinant(a)</tt></td><td><tt title="Python; NumPy.linalg">linalg.det(a)</tt></td><td>Determinant</td></tr><tr><td><tt title="Python; Numeric.LinearAlgebra">inverse(a)</tt></td><td><tt title="Python; NumPy.linalg">linalg.inv(a)</tt></td><td>Inverse</td></tr><tr class="odd"><td></td><td><tt title="Python">linalg.pinv(a)</tt></td><td>Pseudo-inverse</td></tr><tr><td></td><td><tt title="Python">norm(a)</tt></td><td>Norms</td></tr><tr class="odd"><td><tt title="Python; Numeric.LinearAlgebra">eigenvalues(a)</tt></td><td><tt title="Python; NumPy.linalg">linalg.eig(a)[0]</tt></td><td>Eigenvalues</td></tr><tr><td><tt title="Python; Numeric.LinearAlgebra">singular_value_decomposition(a)</tt></td><td><tt title="Python; NumPy.linalg">linalg.svd(a)</tt></td><td>Singular values</td></tr><tr class="odd"><td></td><td><tt title="Python">linalg.cholesky(a)</tt></td><td>Cholesky factorization</td></tr><tr><td><tt title="Python; Numeric.LinearAlgebra">eigenvectors(a)</tt></td><td><tt title="Python; NumPy.linalg">linalg.eig(a)[1]</tt></td><td>Eigenvectors</td></tr><tr class="odd"><td></td><td><tt title="Python">rank(a)</tt></td><td>Rank</td></tr></tbody></table></div><div><h3>Sum</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a.sum(axis=0)</tt></td><td>Sum of each column</td></tr><tr><td></td><td><tt title="Python">a.sum(axis=1)</tt></td><td>Sum of each row</td></tr><tr class="odd"><td></td><td><tt title="Python">a.sum()</tt></td><td>Sum of all elements</td></tr><tr><td></td><td><tt title="Python">a.trace(offset=0)</tt></td><td>Sum along diagonal</td></tr><tr class="odd"><td></td><td><tt title="Python">a.cumsum(axis=0)</tt></td><td>Cumulative sum (columns)</td></tr></tbody></table></div><div><h3>Sorting</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a = array([[4,3,2],[2,8,6],[1,4,7]])</tt></td><td>Example data</td></tr><tr><td><tt title="Python; Numeric">sort(a.flat)</tt></td><td><tt title="Python; NumPy">a.ravel().sort()</tt></td><td>Flat and sorted</td></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">a.sort(axis=0)</tt> <span class="alt">or</span> <tt title="Python; NumPy,MLab">msort(a)</tt></td><td>Sort each column</td></tr><tr><td></td><td><tt title="Python; NumPy">a.sort(axis=1)</tt></td><td>Sort each row</td></tr><tr class="odd"><td></td><td><tt title="Python">a[a[:,0].argsort(),]</tt></td><td>Sort rows (by first row)</td></tr><tr><td></td><td><tt title="Python">a.ravel().argsort()</tt></td><td>Sort, return indices</td></tr><tr class="odd"><td></td><td><tt title="Python">a.argsort(axis=0)</tt></td><td>Sort each column, return indices</td></tr><tr><td></td><td><tt title="Python">a.argsort(axis=1)</tt></td><td>Sort each row, return indices</td></tr></tbody></table></div><div><h3>Maximum and minimum</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">a.max(0)</tt> <span class="alt">or</span> <tt title="Python; matplotlib.pylab">amax(a [,axis=0])</tt></td><td>max in each column</td></tr><tr><td></td><td><tt title="Python; NumPy">a.max(1)</tt> <span class="alt">or</span> <tt title="Python; matplotlib.pylab">amax(a, axis=1)</tt></td><td>max in each row</td></tr><tr class="odd"><td><tt title="Python; Numeric">max(a.flat)</tt></td><td><tt title="Python; NumPy">a.max()</tt></td><td>max in array</td></tr><tr><td></td><td><tt title="Python">maximum(b,c)</tt></td><td>pairwise max</td></tr><tr class="odd"><td></td><td><tt title="Python">a.ptp(); a.ptp(0)</tt></td><td>max-to-min range</td></tr></tbody></table></div><div><h3>Matrix manipulation</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">fliplr(a)</tt> <span class="alt">or</span> <tt title="Python">a[:,::-1]</tt></td><td>Flip left-right</td></tr><tr><td></td><td><tt title="Python; NumPy">flipud(a)</tt> <span class="alt">or</span> <tt title="Python">a[::-1,]</tt></td><td>Flip up-down</td></tr><tr class="odd"><td></td><td><tt title="Python">rot90(a)</tt></td><td>Rotate 90 degrees</td></tr><tr><td></td><td><tt title="Python">kron(ones((2,3)),a)</tt></td><td>Repeat matrix: [ a a a ; a a a ]</td></tr><tr class="odd"><td></td><td><tt title="Python">triu(a)</tt></td><td>Triangular, upper</td></tr><tr><td></td><td><tt title="Python">tril(a)</tt></td><td>Triangular, lower</td></tr></tbody></table></div><div><h3>Equivalents to "size"</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; NumPy,Numeric">a.shape</tt></td><td><tt title="Python; NumPy,Numeric">a.shape</tt> <span class="alt">or</span> <tt title="Python; numarray">a.getshape()</tt></td><td>Matrix dimensions</td></tr><tr><td><tt title="Python; NumPy,Numeric">a.shape[1]</tt> <span class="alt">or</span> <tt title="Python; NumPy,Numeric">size(a, axis=1)</tt></td><td><tt title="Python; NumPy,Numeric">a.shape[1]</tt> <span class="alt">or</span> <tt title="Python; NumPy,Numeric">size(a, axis=1)</tt></td><td>Number of columns</td></tr><tr class="odd"><td></td><td><tt title="Python">a.size</tt> <span class="alt">or</span> <tt title="Python">size(a[, axis=None])</tt></td><td>Number of elements</td></tr><tr><td></td><td><tt title="Python">a.ndim</tt></td><td>Number of dimensions</td></tr><tr class="odd"><td></td><td><tt title="Python">a.nbytes</tt></td><td>Number of bytes used in memory</td></tr></tbody></table></div><div><h3>Matrix- and elementwise- multiplication</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a * b</tt> <span class="alt">or</span> <tt title="Python; NumPy">multiply(a,b)</tt></td><td>Elementwise operations</td></tr><tr><td></td><td><tt title="Python">matrixmultiply(a,b)</tt></td><td>Matrix product (dot product)</td></tr><tr class="odd"><td><tt title="Python; Numeric">innerproduct(a,b)</tt></td><td><tt title="Python; NumPy">inner(a,b)</tt></td><td>Inner matrix vector multiplication $a\cdot b'$</td></tr><tr><td><tt title="Python; Numeric">outerproduct(a,b)</tt></td><td><tt title="Python; NumPy">outer(a,b)</tt></td><td>Outer product</td></tr><tr class="odd"><td></td><td><tt title="Python">kron(a,b)</tt></td><td>Kronecker product</td></tr><tr><td><tt title="Python; Numeric.LinearAlgebra">solve_linear_equations(a,b)</tt></td><td><tt title="Python; NumPy.linalg">linalg.solve(a,b)</tt></td><td>Left matrix division, $b^{-1}{\cdot}a$ \newline (solve linear equations)</td></tr><tr class="odd"><td></td><td><tt title="Python">vdot(a,b)</tt></td><td>Vector dot product</td></tr><tr><td></td><td><tt title="Python">cross(a,b)</tt></td><td>Cross product</td></tr></tbody></table></div><div><h3>Find; conditional indexing</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric,numarray">nonzero(a.flat)</tt></td><td><tt title="Python; NumPy">a.ravel().nonzero()</tt></td><td>Non-zero elements, indices</td></tr><tr><td><tt title="Python; Numeric,numarray">(i,j) = nonzero(a)</tt></td><td><tt title="Python; NumPy">(i,j) = a.nonzero()</tt><br><tt title="Python; NumPy">(i,j) = where(a!=0)</tt></td><td>Non-zero elements, array indices</td></tr><tr class="odd"><td><tt title="Python; Numeric">v = compress(a.flat!=0, a.flat)</tt></td><td><tt title="Python; NumPy">v = a.compress((a!=0).flat)</tt><br><tt title="Python; NumPy">v = extract(a!=0,a)</tt></td><td>Vector of non-zero values</td></tr><tr><td><tt title="Python; Numeric">nonzero(a.flat&gt;5.5)</tt></td><td><tt title="Python; NumPy">(a&gt;5.5).nonzero()</tt></td><td>Condition, indices</td></tr><tr class="odd"><td><tt title="Python; Numeric">compress(a.flat&gt;5.5, a.flat)</tt></td><td><tt title="Python; NumPy">a.compress((a&gt;5.5).flat)</tt></td><td>Return values</td></tr><tr><td></td><td><tt title="Python; NumPy">where(a&gt;5.5,0,a)</tt> <span class="alt">or</span> <tt title="Python; NumPy">a * (a&gt;5.5)</tt></td><td>Zero out elements above 5.5</td></tr><tr class="odd"><td></td><td><tt title="Python">a.put(2,indices)</tt></td><td>Replace values</td></tr></tbody></table></div></div><div xmlns=""><h3>Multi-way arrays</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">a = array([[[1,2],[1,2]],
                                         [[3,4],[3,4]]])</tt></td><td>Define a 3-way array</td></tr><tr><td></td><td><tt title="Python">a[0,...]</tt></td><td></td></tr></tbody></table></div><div xmlns=""><h3>File input and output</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">f = fromfile("data.txt")</tt><br><tt title="Python; matplotlib.pylab">f = load("data.txt")</tt></td><td>Reading from a file (2d)</td></tr><tr><td></td><td><tt title="Python">f = load("data.txt")</tt></td><td>Reading from a file (2d)</td></tr><tr class="odd"><td></td><td><tt title="Python; matplotlib.pylab">f = load('data.csv', delimiter=';')</tt></td><td>Reading fram a CSV file (2d)</td></tr><tr><td></td><td><tt title="Python; matplotlib.pylab">save('data.csv', f, fmt='%.6f', delimiter=';')</tt></td><td>Writing to a file (2d)</td></tr><tr class="odd"><td></td><td><tt title="Python">f.tofile(file='data.csv', format='%.6f', sep=';')</tt></td><td>Writing to a file (1d)</td></tr><tr><td></td><td><tt title="Python">f = fromfile(file='data.csv', sep=';')</tt></td><td>Reading from a file (1d)</td></tr></tbody></table></div><div xmlns=""><h3>Plotting</h3><div><h3>Basic x-y plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">plot(a)</tt></td><td>1d line plot</td></tr><tr><td></td><td><tt title="Python">plot(x[:,0],x[:,1],'o')</tt></td><td>2d scatter plot</td></tr><tr class="odd"><td></td><td><tt title="Python">plot(x1,y1,'bo', x2,y2,'go')</tt></td><td>Two graphs in one plot</td></tr><tr><td></td><td><tt title="Python">plot(x1,y1,'o')</tt><br><tt title="Python">plot(x2,y2,'o')</tt><br><tt title="Python">show() # as normal</tt></td><td>Overplotting: Add new plots to current</td></tr><tr class="odd"><td></td><td><tt title="Python">subplot(211)</tt></td><td>subplots</td></tr><tr><td></td><td><tt title="Python">plot(x,y,'ro-')</tt></td><td>Plotting symbols and color</td></tr></tbody></table><div><h3>Axes and titles</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">grid()</tt></td><td>Turn on grid lines</td></tr><tr><td></td><td><tt title="Python">figure(figsize=(6,6))</tt></td><td>1:1 aspect ratio</td></tr><tr class="odd"><td></td><td><tt title="Python">axis([ 0, 10, 0, 5 ])</tt></td><td>Set axes manually</td></tr><tr><td></td><td><tt title="Python">text(2,25,'hello')</tt></td><td>Insert text</td></tr></tbody></table></div><div><h3>Log plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">semilogy(a)</tt></td><td>logarithmic y-axis</td></tr><tr><td></td><td><tt title="Python">semilogx(a)</tt></td><td>logarithmic x-axis</td></tr><tr class="odd"><td></td><td><tt title="Python">loglog(a)</tt></td><td>logarithmic x and y axes</td></tr></tbody></table></div><div><h3>Filled plots and bar plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">fill(t,s,'b', t,c,'g', alpha=0.2)</tt></td><td>Filled plot</td></tr></tbody></table></div><div><h3>Functions</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">x = arrayrange(0,40,.5)</tt><br><tt title="Python">y = sin(x/3) - cos(x/5)</tt><br><tt title="Python">plot(x,y, 'o')</tt></td><td>Plot a function for given range</td></tr></tbody></table></div></div><div><h3>Polar plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">theta = arange(0,2*pi,0.001)</tt><br><tt title="Python">r = sin(2*theta)</tt></td><td></td></tr><tr><td></td><td><tt title="Python">polar(theta, rho)</tt></td><td></td></tr></tbody></table></div><div><h3>Histogram plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr></tbody></table></div><div><h3>3d data</h3><div><h3>Contour and image plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">levels, colls = contour(Z, V,</tt><br><tt title="Python">    origin='lower', extent=(-3,3,-3,3))</tt><br><tt title="Python">clabel(colls, levels, inline=1,</tt><br><tt title="Python">    fmt='%1.1f', fontsize=10)</tt></td><td>Contour plot</td></tr><tr><td></td><td><tt title="Python">contourf(Z, V,</tt><br><tt title="Python">    cmap=cm.gray,</tt><br><tt title="Python">    origin='lower',</tt><br><tt title="Python">    extent=(-3,3,-3,3))</tt></td><td>Filled contour plot</td></tr><tr class="odd"><td></td><td><tt title="Python">im = imshow(Z,</tt><br><tt title="Python">    interpolation='bilinear',</tt><br><tt title="Python">    origin='lower',</tt><br><tt title="Python">    extent=(-3,3,-3,3))</tt></td><td>Plot image data</td></tr><tr><td></td><td><tt title="Python"># imshow() and contour() as above</tt></td><td>Image with contours</td></tr><tr class="odd"><td></td><td><tt title="Python">quiver()</tt></td><td>Direction field vectors</td></tr></tbody></table></div><div><h3>Perspective plots of surfaces over the x-y plane</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">n=arrayrange(-2,2,.1)</tt><br><tt title="Python">[x,y] = meshgrid(n,n)</tt><br><tt title="Python">z = x*power(math.e,-x**2-y**2)</tt></td><td></td></tr><tr><td></td><td></td><td>Mesh plot</td></tr></tbody></table></div><div><h3>Scatter (cloud) plots</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr></tbody></table></div></div><div><h3>Save plot to a graphics file</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">savefig('foo.eps')</tt></td><td>PostScript</td></tr><tr><td></td><td><tt title="Python">savefig('foo.pdf')</tt></td><td>PDF</td></tr><tr class="odd"><td></td><td><tt title="Python">savefig('foo.svg')</tt></td><td>SVG (vector graphics for www)</td></tr><tr><td></td><td><tt title="Python">savefig('foo.png')</tt></td><td>PNG (raster graphics)</td></tr></tbody></table></div></div><div xmlns=""><h3>Data analysis</h3><div><h3>Set membership operators</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">a = array([1,2,2,5,2])</tt><br><tt title="Python; NumPy">b = array([2,3,4])</tt><br><tt title="Python">a = set([1,2,2,5,2])</tt><br><tt title="Python">b = set([2,3,4])</tt></td><td>Create sets</td></tr><tr><td></td><td><tt title="Python; NumPy">unique1d(a)</tt><br><tt title="Python; NumPy">unique(a)</tt><br><tt title="Python">set(a)</tt></td><td>Set unique</td></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">union1d(a,b)</tt><br><tt title="Python">a.union(b)</tt></td><td>Set union</td></tr><tr><td></td><td><tt title="Python; NumPy">intersect1d(a)</tt><br><tt title="Python">a.intersection(b)</tt></td><td>Set intersection</td></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">setdiff1d(a,b)</tt><br><tt title="Python">a.difference(b)</tt></td><td>Set difference</td></tr><tr><td></td><td><tt title="Python; NumPy">setxor1d(a,b)</tt><br><tt title="Python">a.symmetric_difference(b)</tt></td><td>Set exclusion</td></tr><tr class="odd"><td></td><td><tt title="Python">2 in a</tt><br><tt title="Python; NumPy">setmember1d(2,a)</tt><br><tt title="Python">contains(a,2)</tt></td><td>True for set member</td></tr></tbody></table></div><div><h3>Statistics</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric">average(a [,axis=0])</tt></td><td><tt title="Python; NumPy">a.mean(axis=0)</tt><br><tt title="Python; scipy.stats,MLab,pylab">mean(a [,axis=0])</tt></td><td>Average</td></tr><tr><td></td><td><tt title="Python; NumPy">median(a)</tt> <span class="alt">or</span> <tt title="Python; scipy.stats,MLab,pylab">median(a [,axis=0])</tt></td><td>Median</td></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">a.std(axis=0)</tt> <span class="alt">or</span> <tt title="Python; scipy.stats,MLab,pylab">std(a [,axis=0])</tt></td><td>Standard deviation</td></tr><tr><td></td><td><tt title="Python; NumPy">a.var(axis=0)</tt> <span class="alt">or</span> <tt title="Python; scipy.stats">var(a)</tt></td><td>Variance</td></tr><tr class="odd"><td></td><td><tt title="Python; NumPy">correlate(x,y)</tt> <span class="alt">or</span> <tt title="Python; scipy.stats,MLab,pylab">corrcoef(x,y)</tt></td><td>Correlation coefficient</td></tr><tr><td></td><td><tt title="Python">cov(x,y)</tt></td><td>Covariance</td></tr></tbody></table></div><div><h3>Interpolation and regression</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">(a,b) = polyfit(x,y,1)</tt><br><tt title="Python">plot(x,y,'o', x,a*x+b,'-')</tt></td><td>Straight line fit</td></tr><tr><td><tt title="Python; Numeric.LinearAlgebra">(a,b) = linear_least_squares(x,y)[0]</tt></td><td><tt title="Python; NumPy.linalg">linalg.lstsq(x,y)</tt></td><td>Linear least squares $y = ax + b$</td></tr><tr class="odd"><td></td><td><tt title="Python">polyfit(x,y,3)</tt></td><td>Polynomial fit</td></tr></tbody></table></div><div><h3>Non-linear methods</h3><div><h3>Polynomials, root finding</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">poly()</tt></td><td>Polynomial</td></tr><tr><td></td><td><tt title="Python">roots()</tt></td><td>Find zeros of polynomial</td></tr><tr class="odd"><td></td><td><tt title="Python; matplotlib.pylab">polyval(array([1,2,1,2]),arange(1,11))</tt></td><td>Evaluate polynomial</td></tr></tbody></table></div><div><h3>Differential equations</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">diff(x, n=1, axis=0)</tt></td><td>Discrete difference function and approximate derivative</td></tr></tbody></table></div></div><div><h3>Fourier analysis</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td><tt title="Python; Numeric.FFT">fft(a)</tt></td><td><tt title="Python; NumPy.dft">fft(a)</tt></td><td>Fast fourier transform</td></tr><tr><td><tt title="Python; Numeric.FFT">inverse_fft(a)</tt></td><td><tt title="Python; NumPy.dft">ifft(a)</tt></td><td>Inverse fourier transform</td></tr><tr class="odd"><td></td><td><tt title="Python">convolve(x,y)</tt></td><td>Linear convolution</td></tr></tbody></table></div></div><div xmlns=""><h3>Symbolic algebra; calculus</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr></tbody></table></div><div xmlns=""><h3>Programming</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">.py</tt></td><td>Script file extension</td></tr><tr><td></td><td><tt title="Python">#</tt></td><td>Comment symbol (rest of line)</td></tr><tr class="odd"><td></td><td><tt title="Python">from pylab import *</tt></td><td>Import library functions</td></tr><tr><td></td><td><tt title="Python">string="a=234"</tt><br><tt title="Python">eval(string)</tt></td><td>Eval</td></tr></tbody></table><div><h3>Loops</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">for i in range(1,6): print(i)</tt></td><td>for-statement</td></tr><tr><td></td><td><tt title="Python">for i in range(1,6):</tt><br><tt title="Python">    print(i)</tt><br><tt title="Python">    print(i*2)</tt></td><td>Multiline for statements</td></tr></tbody></table></div><div><h3>Conditionals</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">if 1&gt;0: a=100</tt></td><td>if-statement</td></tr></tbody></table></div><div><h3>Debugging</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">print a</tt></td><td>Print</td></tr></tbody></table></div><div><h3>Working directory and OS</h3><table><tbody><tr><th>Numeric (typical differences)</th><th>Python; NumPy, Matplotlib</th><th>Description</th></tr><tr class="odd"><td></td><td><tt title="Python">os.listdir(".")</tt></td><td>List files in directory</td></tr><tr><td></td><td><tt title="Python">grep.grep("*.py")</tt></td><td>List script files in directory</td></tr><tr class="odd"><td></td><td><tt title="Python">os.getcwd()</tt></td><td>Displays the current working directory</td></tr><tr><td></td><td><tt title="Python">os.chdir('foo')</tt></td><td>Change working directory</td></tr><tr class="odd"><td></td><td><tt title="Python">os.system('notepad')</tt><br><tt title="Python">os.popen('notepad')</tt></td><td>Invoke a System Command</td></tr></tbody></table></div></div><p id="colophon">Time-stamp: "2007-11-09T16:46:36 vidar"<br><a href="http://mathesaurus.sourceforge.net/">©2006 Vidar Bronken Gundersen, /mathesaurus.sf.net</a><br>
            Permission is granted to copy, distribute and/or modify
            this document as long as the above attribution is retained.
          </p>
</body><editor-card style="animation: initial; transition: initial; color: initial; font: initial; font-feature-settings: initial; font-kerning: initial; font-optical-sizing: initial; font-variation-settings: initial; text-orientation: initial; text-rendering: initial; -webkit-font-smoothing: initial; -webkit-locale: initial; -webkit-text-orientation: initial; -webkit-writing-mode: initial; writing-mode: initial; zoom: initial; place-content: initial; place-items: initial; place-self: initial; alignment-baseline: initial; backdrop-filter: initial; backface-visibility: initial; background: initial; background-blend-mode: initial; baseline-shift: initial; block-size: initial; border-block-end: initial; border-block-start: initial; border: initial; border-radius: initial; border-collapse: initial; border-inline-end: initial; border-inline-start: initial; bottom: initial; box-shadow: initial; box-sizing: initial; break-after: initial; break-before: initial; break-inside: initial; buffered-rendering: initial; caption-side: initial; caret-color: initial; clear: initial; clip: initial; clip-path: initial; clip-rule: initial; color-interpolation: initial; color-interpolation-filters: initial; color-rendering: initial; columns: initial; column-fill: initial; gap: initial; column-rule: initial; column-span: initial; contain: initial; content: initial; counter-increment: initial; counter-reset: initial; cursor: initial; cx: initial; cy: initial; d: initial; display: initial; dominant-baseline: initial; empty-cells: initial; fill: initial; fill-opacity: initial; fill-rule: initial; filter: initial; flex: initial; flex-flow: initial; float: initial; flood-color: initial; flood-opacity: initial; grid: initial; grid-area: initial; height: initial; hyphens: initial; image-rendering: initial; inline-size: initial; isolation: initial; left: 0px; letter-spacing: initial; lighting-color: initial; line-break: initial; list-style: initial; margin-block-end: initial; margin-block-start: initial; margin: initial; margin-inline-end: initial; margin-inline-start: initial; marker: initial; mask: initial; mask-type: initial; max-block-size: initial; max-height: initial; max-inline-size: initial; max-width: initial; min-block-size: initial; min-height: initial; min-inline-size: initial; min-width: initial; mix-blend-mode: initial; object-fit: initial; object-position: initial; offset: initial; opacity: initial; order: initial; orphans: initial; outline: initial; outline-offset: initial; overflow-anchor: initial; overflow-wrap: initial; overflow: initial; overscroll-behavior-block: initial; overscroll-behavior-inline: initial; overscroll-behavior: initial; padding-block-end: initial; padding-block-start: initial; padding: initial; padding-inline-end: initial; padding-inline-start: initial; page: initial; paint-order: initial; perspective: initial; perspective-origin: initial; pointer-events: initial; position: absolute; quotes: initial; r: initial; resize: initial; right: initial; rx: initial; ry: initial; scroll-behavior: initial; scroll-margin-block: initial; scroll-margin: initial; scroll-margin-inline: initial; scroll-padding-block: initial; scroll-padding: initial; scroll-padding-inline: initial; scroll-snap-align: initial; scroll-snap-stop: initial; scroll-snap-type: initial; shape-image-threshold: initial; shape-margin: initial; shape-outside: initial; shape-rendering: initial; size: initial; speak: initial; stop-color: initial; stop-opacity: initial; stroke: initial; stroke-dasharray: initial; stroke-dashoffset: initial; stroke-linecap: initial; stroke-linejoin: initial; stroke-miterlimit: initial; stroke-opacity: initial; stroke-width: initial; tab-size: initial; table-layout: initial; text-align: initial; text-align-last: initial; text-anchor: initial; text-combine-upright: initial; text-decoration: initial; text-decoration-skip-ink: initial; text-indent: initial; text-overflow: initial; text-shadow: initial; text-size-adjust: initial; text-transform: initial; text-underline-position: initial; top: 0px; touch-action: initial; transform: initial; transform-box: initial; transform-origin: initial; transform-style: initial; user-select: initial; vector-effect: initial; vertical-align: initial; visibility: initial; -webkit-app-region: initial; -webkit-appearance: initial; border-spacing: initial; -webkit-border-image: initial; -webkit-box-align: initial; -webkit-box-decoration-break: initial; -webkit-box-direction: initial; -webkit-box-flex: initial; -webkit-box-ordinal-group: initial; -webkit-box-orient: initial; -webkit-box-pack: initial; -webkit-box-reflect: initial; -webkit-font-size-delta: initial; -webkit-highlight: initial; -webkit-hyphenate-character: initial; -webkit-line-break: initial; -webkit-line-clamp: initial; -webkit-margin-collapse: initial; -webkit-margin-bottom-collapse: initial; -webkit-margin-top-collapse: initial; -webkit-mask-box-image: initial; -webkit-mask: initial; -webkit-mask-composite: initial; -webkit-perspective-origin-x: initial; -webkit-perspective-origin-y: initial; -webkit-print-color-adjust: initial; -webkit-rtl-ordering: initial; -webkit-ruby-position: initial; -webkit-tap-highlight-color: initial; -webkit-text-combine: initial; -webkit-text-decorations-in-effect: initial; -webkit-text-emphasis: initial; -webkit-text-emphasis-position: initial; -webkit-text-fill-color: initial; -webkit-text-security: initial; -webkit-text-stroke: initial; -webkit-transform-origin-x: initial; -webkit-transform-origin-y: initial; -webkit-transform-origin-z: initial; -webkit-user-drag: initial; -webkit-user-modify: initial; white-space: initial; widows: initial; width: initial; will-change: initial; word-break: initial; word-spacing: initial; x: initial; y: initial; z-index: auto;"></editor-card></html>